write_str([]):-!.
 write_str([H|Tail]):-put(H),write_str(Tail).

 write_list_str([]):-!.
 write_list_str([H|Tail]):-write_str(H),write(" "),write_list_str(Tail).

 read_str(X,Y):-get0(A),r_str(A,X,[],Y,0).
 r_str(10,X,X,Y,Y):-!.
 r_str(A,X,B,Y,C):-C1 is C+1,append(B,[A],B1),get0(A1),r_str(A1,X,B1,Y,C1).

 member(E,[E|_]).
 member(E,[_|T]):- member(E,T).

 append1([],List,List):-!.
 append1([H1|T1],List,[H1|T3]):-append(T1,List,T3).

 reverse(A, Z) :- reverse(A,Z,[]).
 reverse([],Z,Z).
 reverse([H|T],Z,Acc) :- reverse(T,Z,[H|Acc]).

 min_list_lists([[H|T]|T1],Min):-min_list_lists([[H|T]|T1],255,Buf,Min).
 min_list_lists([],_,M,M):-!.
 min_list_lists([[H|T]|T1],M,Buf,Min):-(H<M -> M1 is H,min_list_lists(T1,M1,[H|T],Min);
 min_list_lists(T1,M,Buf,Min)).

 reverse_list(List,ListR):-reverse_list(List,[],ListR).
 reverse_list([],Buffer,Buffer):-!.
 reverse_list([H|T],Buffer,ListR):-reverse_list(T,[H|Buffer],ListR).

 length_list([],0):-!.
 length_list([_|T],L):-length_list(T,L1),L is L1+1.

 %1
 triple:-read_str(A,Length),write_str(A),write(","),write_str(A),write(","),
 write_str(A),write(", Legth.str="),write(Length).
 %2
 kolvo:-read_str(A,_),append1([32],A,A1),kolwords(A1,0,Kol),write(Kol).
 kolwords([_|[]],Kol,Kol):-!.
 kolwords([H1|[H2|T]],K,Kol):-(H1=32,H2\=32 -> K1 is K+1,kolwords([H2|T],K1,Kol);
 kolwords([H2|T],K,Kol)).

 %4
 four:-read_str(A,Length),(Length>5 -> four(A),reverse(A,AR),fourR(AR);four(A,Length)),!.
 four([H1|[H2|[H3|_]]]):-put(H1),put(H2),put(H3),!.
 four([_|_],0):-!.
 four([H|T],Length):-put(H),L1 is Length-1,four([H|T],L1),!.
 fourR([H1|[H2|[H3|_]]]):-put(H3),put(H2),put(H1),!.


 %5
 last_symbol:-read_str(A,_),reverse(A,[H|_],_),EndS = H,list_entry_el(A,EndS,_).

 list_entry_el([H|T],El,Num):-list_entry_el([H|T],El,Num,0).
 list_entry_el([],_,_,_):-!.
 list_entry_el([H|T],El,Num,Chet):-Chet1 is Chet+1,(H = El,
 Num1 = Chet1 -> write(Chet1),write(" "),list_entry_el(T,El,Num1,Chet1);list_entry_el(T,El,Num,Chet1)).

 %6
 everythird:-read_str(A,_),everythird(A,0).
 everythird([],_):-!.
 everythird([H|T],C):-C1 is C+1,(0 is C1 mod 3 -> put(H),everythird(T,C1);
 everythird(T,C1)).

 %7
 zero([_|[]],KZ,KZ):-!.
 zero([H1|[H2|T3]],KZero,KolZero):-((H1=43;H1=45),H2=48 -> KZero1 is KZero+1,zero([H2|T3],KZero1,KolZero);zero([H2|T3],KZero,KolZero)).
 kol_plus_minus:-read_str(A,_),kol_plus_minus(A,0,KP,0,KM),zero(A,0,KZ),write("Plus = "),write(KP),nl,write("Minus = "),write(KM),nl,write("Zero = "),write(KZ),!.
 kol_plus_minus([],KP,KP,KM,KM):-!.
 kol_plus_minus([43|T],KP,KolP,KM,KolM):-KP1 is KP+1,kol_plus_minus(T,KP1,KolP,KM,KolM).
 kol_plus_minus([45|T],KP,KolP,KM,KolM):-KM1 is KM+1,kol_plus_minus(T,KP,KolP,KM1,KolM).
 kol_plus_minus([_|T],KP,KolP,KM,KolM):-kol_plus_minus(T,KP,KolP,KM,KolM).

 %8
 list_el_num([H|T],El,Num):-list_el_num([H|T],El,Num,0).
 list_el_num([],119,0,_):-write("w no exist"),nl,!.
 list_el_num([],120,0,_):-write("x no exist"),nl,!.
 list_el_num([],_,0,_):-!.
 list_el_num([H|T],El,Num,Chet):-Chet1 is Chet+1,(H = El,
 Num = Chet1 -> !;list_el_num(T,El,Num,Chet1)).

 x_w:-read_str(A,_),write(A),nl,x_w(A).
 x_w(A):-list_el_num(A,119,N1),list_el_num(A,120,N2),N1\=N2,
 (N1<N2 -> write("Exist: "),put(119),nl;write("Exist: "),put(120)).

 %9
 length_list([],K,K):-!.
 length_list([_|T],K,Kol):-K1 is K+1,length_list(T,K1,Kol).

 big_st:-read_str(A1,N1),read_str(A2,N2),(N1>N2 -> N3 is N1-N2,write_n(N3,A1);N3 is N2-N1,
 write_n(N3,A2)).
 write_n(0,_):-!.
 write_n(N,A):-write_str(A),N1 is N-1,write_n(N1,A).

 %10
 www:-read_str(A,_),www(A,A1),write_str(A1).

 www([H1,H2,H3|T],List1):-H1=97,H2=98,H3=99,List1 = [119,119,119|T],!.
 www(List,List1):-append1(List,[122,122,122],List1),!.

 %11
 l_str:-read_str(A,Length),(Length>10 -> l_str(A,AN);l_str(A,Length,12,AN)),write_str(AN).
 l_str(A,AN):- AN = [_,_,_,_,_,_],append1(AN,_,A),!.
 l_str(AN,12,_,AN):-!.
 l_str(A,L,Length,AN):-L1 is L+1,append1(A,[111],A1),l_str(A1,L1,Length,AN).

 %12
 fragments:-read_str(A,_),fragments(A,[],B),sort(B).
 fragments([],B,B):-!.
 fragments([H1,H2,H3|T],B,C):-rand_fr([H1,H2,H3],R),append1(B,[R],B1),fragments(T,B1,C),!.
 rand_fr([H1,H2,H3],R):-H is random(256),(not(member([H1,H2,H3],H)) -> R = [H1,H,H3];
 rand_fr([H1,H2,H3],R)).

 sort([]):-!.
 sort([H|T]):-min_list_lists([H|T],Min),write_str(Min),remove_number([H|T],Min,LN),sort(LN).

 remove_number([H1|T1],X,List):-remove_number([H1|T1],[],List,X).
 remove_number([],Buffer,List2,_):-reverse_list(Buffer,List2),!.
 remove_number([H1|T1],Buffer,List2,X):-(H1=X -> remove_number(T1,Buffer,List2,X);
 remove_number(T1,[H1|Buffer],List2,X)).

 %13
 replace_4:-read_str(A,_),replace_4(A,0,[],NA),reverse(NA,NAR),write_str(NAR).
 replace_4([],_,A,A):-!.
 replace_4([H|T],C,NA,NAa):-C1 is C+1,0 is C1 mod 2,(H\=97,H\=98
 -> append1([97],NA,NA1),replace_4(T,C1,NA1,NAa),!;
 append1([99],NA,NA1),replace_4(T,C1,NA1,NAa)),!.
 replace_4([H|T],C,NA,NAa):-C1 is C+1,append1([H],NA,NA1),
 replace_4(T,C1,NA1,NAa).

 %14
 digits:-read_str(A,_),digits(A,0,Kol),write(Kol).
 digits([],K,K):-!.
 digits([H|T],K,Kol):-H>47,H<58,K1 is K+1,digits(T,K1,Kol),!.
 digits([_|T],K,Kol):-digits(T,K,Kol),!.

 %15
 abc:-read_str(A,_),abc(A).
 abc([]):-!.
 abc([H|_]):-H\=97,H\=98,H\=99,!,fail.
 abc([_|T]):-abc(T).

 %16
 replace_word:-read_str(A,_),replace_word(A,[],NL),write_str(NL).
 replace_word([],NL,NL):-!.
 replace_word([119,111,114,100|T],Buffer,NL):-append(Buffer,[108,101,116,116,101,114],BufferN),
 replace_word(T,BufferN,NL),!.
 replace_word([H|T],Buffer,NL):-append1(Buffer,[H],BufferN),replace_word(T,BufferN,NL),!.

 %17
 remove_x_abc:-read_str(A,_),remove_x_abc(A,[],NL),write_str(NL).
 remove_x_abc([],NL,NL):-!.
 remove_x_abc([120,97,98,99|T],Buffer,NL):-append1(Buffer,[97,98,99],BufferN),remove_x_abc(T,BufferN,NL),!.
 remove_x_abc([H|T],Buffer,NL):-append1(Buffer,[H],BufferN),remove_x_abc(T,BufferN,NL).

 %18
 remove_abc_numb:-read_str(A,_),remove_abc_numb(A,[],NL),write_str(NL).
 remove_abc_numb([],NL,NL):-!.
 remove_abc_numb([97,98,99,H|T],Buffer,NL):-H>47,H<58,remove_abc_numb([H|T],Buffer,NL),!.
 remove_abc_numb([H|T],Buffer,NL):-append1(Buffer,[H],BufferN),remove_abc_numb(T,BufferN,NL).

 %19
 kol_aba:-read_str(A,_),kol_aba(A,0,Kol),write(Kol).
 kol_aba([],K,K):-!.
 kol_aba([97,98,97|T],K,Kol):-K1 is K+1,kol_aba(T,K1,Kol),!.
 kol_aba([_|T],K,Kol):-kol_aba(T,K,Kol).
